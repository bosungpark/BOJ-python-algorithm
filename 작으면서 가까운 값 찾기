"""
이 문제에서 재미있는 점은 작은 값 중 하필 왼쪽에 있는 값을 지명했다는 점이다.
일반적인 자료구조라면 정답을 저장하는 배열이 역순으로 저장되어 정렬이 필요하다.

이 정렬과정을 피하기 위해 삽입 삭제가 비교적 자유로운 deque()를 사용했다.

기본적인 로직은 다음과 같다.
우선 배열의 맨 끝값을 pop()한다.
이후 배열을 뒤에서부터 탐색하며, 작은 값이 있는지 찾는다.
값이 있다면 값을, 없다면 0을 정답 배열에 저장한다.

다만 이런 풀이는 최악의 경우 O(n**2)의 시간 복잡도를 가진다.
만약 배열이 내림차순으로 정렬되어 있다면, 있지도 않은 값을 탐색하느라 시간을 낭비하게 된다.

이 경우를 대비해 예외처리를 해주었다.
have_no_smaller_value라는 변수를 만든다.
만약 현재 값이 배열 왼쪽에서 작은 값을 찾을 수 없다면 저장해준다.
만약 비교하는 요소가 이 값과 같은 값이라면, 0을 return해준다.
이렇게 하면 최소한 비교하는 요소가 이전에 실패한 경우에 대해서는 약간의 수행시간 개선을 할 수 있다.

이 외의 삽입 삭제에 걸리는 시간은 상수 시간이므로 생략했다.
"""

from collections import deque

n=int(input())
array=deque(map(int,input().split()))

answer=deque()
have_no_smaller_value=float("inf")

def findSmaller():
	global have_no_smaller_value
	
	if element==have_no_smaller_value:
		return answer.appendleft(0)
	
	for i in range(len(array)-1,-1,-1):
		if array[i]<element:
			return answer.appendleft(array[i])
	have_no_smaller_value=element
	return answer.appendleft(0)

while array:
	element=array.pop()
	findSmaller()

print(*answer)
