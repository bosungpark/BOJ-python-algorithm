"""
투포인터 알고리즘을 통한 접근을 하였습니다.
시간복잡도는 대략 O(n)입니다.

우선 k가지 수가 있는지 체크하는 배열을 만들어줍니다.
또 바깥쪽 무지개를 판별해야하니 전체 숫자의 갯수를 담은 배열도 만들어줍니다.

순회를 하면서, 만약 쌍무지개라면 그 구간의 수를 비교해 저장해주고,구간을 당겨줍니다.
아니라면 구간을 늘려줍니다.
"""
import sys
n,k=map(int, sys.stdin.readline().split())

array=list(int(sys.stdin.readline()) for _ in range(n))
# print(array)
check=[0 for _ in range(0,k+1)]
check[0]=-1#구간안에 1부터 k까지의 수가 있는지를 확인.

check_outer=[0 for _ in range(0,k+1)]
check_outer[0]=-1
for a in array:
	check_outer[a]+=1
# print(check_outer)

start=0
end=0
answer=float('inf')
sum=0

check[array[end]]+=1
sum+=1
flag=True
while start<=end and end<n:
	# print(check)
	if end==n-1 and (0 in check):
		break
	if (0 in check) and end<n-1:
		end+=1
		check[array[end]]+=1
		check_outer[array[end]]-=1
		if check_outer[array[end]]==0:
			flag=False
		sum+=1
	elif (0 not in check):
		#check된 원소의 갯수의 합을 반환, 단 check[0]이 -1 이므로 1을 더해준다.
		
		# for i in range(1,k+1):
		# 	if check_outer[i]-check[i]==0:
		# 		flag=False
		# 		break			
		if flag:
			answer=min(answer,sum)
		check[array[start]]-=1
		check_outer[array[start]]+=1
		sum-=1
		start+=1

if answer==float("inf"):
	print(0)
else:
	print(answer)
		
