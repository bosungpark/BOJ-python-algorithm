"""
이 문제를 풀 때 힌트를 얻은 점은 '연속된 값들의 합'이라는 점이다.
연속되었다는 의미는 정렬을 사용할 수 없다는 의미이다.

따라서 목표 값을 얻을 때까지, 구간에 값을 순차적으로 추가해주는 풀이를 생각했다.
만약 구간의 합이 목표한 값을 넘어가게 되면, 가장 오래된 값을 제거해주었다.

이 풀이를 사용하려면 자료구조의 양 끝에서 모두 삽입과 삭제가 가능해야 한다.
따라서 deque() 자료구조를 이용했다.

수행시간은 최악의 경우 모든 구간을 탐색해야한다.
이 경우, sum() 연산이 매 번 호출된다.
이는 결국 연산이 n*(n+1)/2번 일어난다는 의미이다.
따라서 수행시간은 O(n**2)이 된다.

수행시간을 개선하기 위해서는 sum()을 매번 호출하는 방식을 수정하면 된다.
변수에 구간의 합을 할당해두고, 삽입 삭제시마다 값을 조정해주면 된다.

이 경우, 연산시간은 최악의 경우라도 가정해도 O(n)이다.
삽입과 삭제는 상수시간에 처리가 가능하기 때문이다.
"""

from collections import deque

n,k=map(int, input().split())
array=deque(map(int, input().split()))

target=deque()
def findTarget():
	while array:
		if sum(target)<k:
			target.append(array.pop())
		if sum(target)>k:
			target.popleft()
		if sum(target)==k:
			return print(True)
	print(False)
	
findTarget()
